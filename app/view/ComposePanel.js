/*
 * File: app/view/ComposePanel.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.1.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Google.view.ComposePanel', {
    extend: 'Ext.form.Panel',
    alias: 'widget.ComposePanel',

    requires: [
        'Ext.field.Hidden'
    ],

    config: {
        items: [
            {
                xtype: 'fieldset',
                title: 'Compose',
                items: [
                    {
                        xtype: 'textfield',
                        id: 'full_name',
                        label: '',
                        name: 'full_name',
                        placeHolder: 'Name',
                        readOnly: true
                    },
                    {
                        xtype: 'textareafield',
                        id: 'message',
                        name: 'message',
                        placeHolder: 'Message'
                    },
                    {
                        xtype: 'hiddenfield',
                        id: 'user_id',
                        name: 'user_id'
                    },
                    {
                        xtype: 'hiddenfield',
                        id: 'from',
                        name: 'from'
                    },
                    {
                        xtype: 'hiddenfield',
                        name: 'c_id'
                    }
                ]
            },
            {
                xtype: 'button',
                itemId: 'mybutton',
                ui: 'confirm',
                text: 'Send'
            }
        ],
        listeners: [
            {
                fn: 'onMybuttonTap',
                event: 'tap',
                delegate: '#mybutton'
            },
            {
                fn: 'onFormpanelInitialize',
                event: 'initialize'
            }
        ]
    },

    onMybuttonTap: function(button, e, options) {
        var values = this.getValues();
        //console.log(values);

        this.submit({
            url: 'http://api.eventsy.co.uk/message.php',
            method: 'POST',
            success: function(response) {
                // do whatever you need to with the generated HTML
                Ext.Msg.alert("Sent", "Your message has been sent.");
                this.reset();
                this.up('NavView').pop();
            },
            failure: function(response){
                // Do failure message
                Ext.Msg.alert("Failed", "Sorry, you cannot send a blank message.");
            }
        });
    },

    onFormpanelInitialize: function(component, options) {
        var userID = this.getInitialConfig('userID');
        var full_name = this.getInitialConfig('full_name');


        var store = Ext.getStore('CurrentUser');

        store.load();
        var rec = store.findRecord('id', '1');
        myid = rec.get('user_id');



        // Stick the name in the recipient field

        Ext.getCmp('full_name').setValue(full_name);
        Ext.getCmp('user_id').setValue(userID);
        Ext.getCmp('from').setValue(myid);
    }

});