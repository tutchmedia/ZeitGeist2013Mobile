/*
 * File: app/view/SettingsPanel.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.1.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Google.view.SettingsPanel', {
    extend: 'Ext.form.Panel',
    alias: 'widget.SettingsPanel',

    requires: [
        'Ext.field.Toggle'
    ],

    config: {
        items: [
            {
                xtype: 'container',
                height: 150,
                html: '<h1>Message</h1> <small>Messages allows attendees to contact each other. It provides a safe enviroment to talk to other guest without giving out personal information. </small>'
            },
            {
                xtype: 'togglefield',
                itemId: 'mytogglefield',
                label: 'Messages',
                name: 'messages',
                listeners: [
                    {
                        fn: function(component, options) {
                            var store = Ext.getStore('CurrentUser');

                            store.load();
                            var rec = store.findRecord('id', '1');
                            messages = rec.get('allowMessages'); // get the allowMessages toggle value






                            this.setValue(messages);

                            console.log("Set the toggle to the same as the database");

                        },
                        event: 'initialize'
                    }
                ]
            },
            {
                xtype: 'container',
                margin: '50 0 0 0',
                items: [
                    {
                        xtype: 'button',
                        itemId: 'mybutton24',
                        ui: 'decline',
                        text: 'Log Out'
                    }
                ]
            }
        ],
        listeners: [
            {
                fn: 'onMytogglefieldChange',
                single: false,
                event: 'change',
                delegate: '#mytogglefield'
            },
            {
                fn: 'onMybutton24Tap',
                event: 'tap',
                delegate: '#mybutton24'
            },
            {
                fn: 'onFormpanelShow',
                event: 'show'
            },
            {
                fn: 'onFormpanelInitialize',
                event: 'initialize'
            }
        ]
    },

    onMytogglefieldChange: function(me, newValue, oldValue, eOpts) {

        // Set to 1 text


        var store = Ext.getStore('CurrentUser');
        var index = store.find('id','1');
        var record = store.getAt(index);


        var rec = store.findRecord('id', '1');
        var user_id = rec.get('user_id'); // get the allowMessages toggle value


        var val = eOpts;

        if (val === 1)
        {


            // Set to 1
            record.set('allowMessages', '1' );
            record.dirty = true;
            store.sync(); 

            console.log("Updated Messages Settings to 1");

            this.submit({
                url: 'http://api.eventsy.co.uk/options.php?user_id='+ user_id +'&allowMessages=1',
                method: 'GET',
                success: function(response) {
                    // do whatever you need to with the generated HTML
                    console.log("Changed web option to 1");
                },
                failure: function(response){
                    // Do failure message
                    console.warn("Didn't work.");
                }
            });


        } else { 
            // Set to 0
            record.set('allowMessages', '0' );
            record.dirty = true;
            store.sync(); 

            console.log("Updated Messages Settings to 0");


            // Update web option for the user

            this.submit({
                url: 'http://api.eventsy.co.uk/options.php?user_id='+ user_id +'&allowMessages=0',
                method: 'GET',
                success: function(response) {
                    // do whatever you need to with the generated HTML
                    console.log("Changed web option to 0");
                },
                failure: function(response){
                    // Do failure message
                    console.warn("Didn't work.");
                }
            });


        }


    },

    onMybutton24Tap: function(button, e, options) {
        Ext.ModelMgr.getModel('Google.model.CurrentUser').load(1, {
            success: function(username) {

                Ext.Msg.confirm('Confirm', 'Are you sure you want to log out?', function(confirmed) {
                    if (confirmed == 'yes') {
                        username.erase({
                            success: function() {
                                window.location.reload();
                            }
                        });
                    }
                }, this);
            },

            failure: function() {
                // this should not happen, nevertheless:
                window.location.reload();
            }

        },
        this
        );
    },

    onFormpanelShow: function(component, options) {
        //Ext.getCmp('SettingsButton').hide(true);
    },

    onFormpanelInitialize: function(component, options) {
        Ext.getCmp('SettingsButton').hide(true);
    }

});